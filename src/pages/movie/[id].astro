---
import { type DetailsMovie } from "@/types/apiDetailsMovies";
import { type ReleaseDate, type Result } from "@/types/apiReleaseDate";
import { type Credits, type Cast } from "@/types/apiCreditsMovie";
import { type SimilarMovies } from "@/types/apiSimilarMovies";
import { getDetailsMovie } from "@/services/getDetailsMovie";
import Layout from "@/layouts/Layout.astro";
import DetailsMovies from "@/components/DetailsMovies.astro";
import TopCast from "@/components/TopCast.astro";
import SimilarMoviesContainer from "@/components/SimilarMoviesContainer.astro";

export const prerender = false;

const { id } = Astro.params;

let movieDetails;
let releaseDate;
let credits;
let similarMovies;

if (id) {
  movieDetails = (await getDetailsMovie(id)) as DetailsMovie;
  releaseDate = (await getDetailsMovie(id, "/release_dates")) as ReleaseDate;
  credits = (await getDetailsMovie(id, "/credits")) as Credits;
  similarMovies = (await getDetailsMovie(id, "/similar")) as SimilarMovies;
}

function getRuntime(runtime: number) {
  const hours = Math.floor(runtime / 60);
  const minutes = Math.floor(runtime % 60);
  return `${hours}h ${minutes}m`;
}

function getReleaseDate(releaseDate: ReleaseDate) {
  return releaseDate.results.map((result: Result) => {
    if (result.iso_3166_1 === "EE") {
      let date = new Date(result.release_dates[0].release_date);
      let day = date.getUTCDate();
      let month = date.getUTCMonth() + 1;
      let year = date.getUTCFullYear();
      return `${day}/${month}/${year}`;
    }
  });
}

function getTopBilledCast(credits: Credits) {
  let cast = credits.cast.filter(
    (cast: Cast) => cast && cast.order !== undefined && cast.order < 6
  );

  if (cast.length > 0) {
    return cast.sort((a, b) => b.popularity - a.popularity);
  } else {
    return [];
  }
}

function getMostPopularDirector(credits: Credits) {
  let directors = credits.crew.filter(
    (crew: Cast) => crew && crew.department === "Directing"
  );

  if (directors.length > 0) {
    return directors.sort((a, b) => b.popularity - a.popularity);
  } else {
    return [];
  }
}

function getSimilarMovies(similarMovies: SimilarMovies) {
  let movies = similarMovies.results;

  if (movies.length > 0) {
    return movies.sort((a, b) => b.popularity - a.popularity);
  } else {
    return [];
  }
}
---

<Layout title=`${movieDetails?.original_title} - Reel Library`>
  <div class="flex flex-col gap-5 md:gap-10">
    <DetailsMovies
      img=`${movieDetails?.poster_path}`
      title={`${movieDetails?.original_title}`}
      average={`${movieDetails?.vote_average.toFixed(1)}`}
      alt={`${movieDetails?.original_title}`}
      overview={`${movieDetails?.overview}`}
      runtime={movieDetails?.runtime ? getRuntime(movieDetails.runtime) : ""}
      realeaseDate={releaseDate ? getReleaseDate(releaseDate) : undefined}
      genres={movieDetails?.genres || []}
      credits={credits ? getMostPopularDirector(credits) : []}
    />
    <TopCast cast={credits ? getTopBilledCast(credits) : []} />
    <SimilarMoviesContainer
      similarMovies={similarMovies ? getSimilarMovies(similarMovies) : []}
    />
  </div>
</Layout>
