---
import Search from "@/assets/svg/Search.svg";
---

<nav
  class="w-full h-16 flex justify-between items-center bg-bg-100 px-4 lg:px-6"
>
  <h1 class="text-xl font-bold text-primary-100 -skew-x-[22deg]">
    <a id="logo" href="/">ReelLibrary</a>
  </h1>
  <div
    id="input-container"
    class="w-11 h-11 bg-bg-300/30 rounded-full flex justify-between items-center transition-[width] ease-in-out duration-600 border-1 border-transparent"
  >
    <div>
      <search>
        <input
          id="search-input"
          type="text"
          placeholder="Search"
          class="w-0 outline-none"
        />
      </search>
    </div>
    <button
      type="button"
      aria-label="Search"
      title="Search"
      id="search-button"
      class="w-11 h-11 bg-bg-300/30 rounded-full content-center"
    >
      <Search class="w-8 h-8 mx-auto" />
    </button>
  </div>
</nav>
<div id="modal" class="hidden relative">
  <div
    id="search-container"
    class="search-container absolute z-30 top-0 left-0 w-full h-[540px] overflow-y-scroll flex flex-col gap-1 p-1 md:w-3/8 md:right-0 md:left-auto md:h-[366px]"
  >
  </div>
</div>

<script>
  import type { QueryMovies } from "@/types/apiQueryMovies";

  let debounceTimer = 0;

  const setupSearch = () => {
    const $inputContainer = document.getElementById(
      "input-container"
    ) as HTMLDivElement;
    const $searchInput = document.getElementById(
      "search-input"
    ) as HTMLInputElement;
    const $searchButton = document.getElementById(
      "search-button"
    ) as HTMLButtonElement;
    const $modal = document.getElementById("modal") as HTMLDivElement;
    const $searchContainer = document.getElementById(
      "search-container"
    ) as HTMLElement;

    $searchButton.addEventListener("click", () => {
      $inputContainer.classList.toggle("show-input");
      $searchInput.classList.toggle("search-input");
      $modal.classList.toggle("hidden");

      if (!$searchInput.classList.contains("pl-2")) {
        $searchInput.classList.add("pl-2");
        $searchInput.focus();
      } else {
        $searchInput.classList.remove("pl-2");
        $searchInput.blur();
      }
    });

    $searchInput.addEventListener("keyup", (e) => {
      clearTimeout(debounceTimer);
      let query = $searchInput.value;

      if (query.length < 2) {
        $searchContainer.innerHTML = ``;
        return;
      }

      if (query.length > 2) {
        debounceTimer = setTimeout(async () => {
          try {
            const movies = await getMovies(query);
            if (movies) {
              printMovies(movies);
            }
          } catch (error) {
            console.error(error);
          }
        }, 500);
      }
    });

    async function getMovies(query: string) {
      try {
        const response = await fetch(`/api/query/${query}.json`);
        if (!response.ok) {
          throw new Error(`Error fetching data: ${response.statusText}`);
        }
        const data = await response.json();

        return data;
      } catch (error) {
        console.error(error);
      }
    }

    function printMovies(movies: QueryMovies) {
      $searchContainer.innerHTML = `
      ${movies.results
        .map(
          (movie) => `
          <a href="/movie/${movie.id}">
            <article class="flex flex-row items-center gap-3 rounded-lg border-l-8 border-l-transparent bg-bg-300 hover:border-l-primary-100 transition-all ease-in-out duration-200">
              <img
                src="https://image.tmdb.org/t/p/w200${movie.poster_path}"
                alt="${movie.title}"
                class="w-16 h-auto aspect-auto object-contain"
              />
              <div class="flex flex-col gap-1">
                <h3 class="text-xl font-bold text-balance">${movie.title}</h3>
                <p class="text-sm text-text-200">${movie.vote_average.toFixed(2)}‚≠ê</p>
              </div>
            </article>
          </a>
        `
        )
        .join("")}
    `;
    }
  };

  document.addEventListener("astro:page-load", setupSearch);
</script>

<style>
  .show-input {
    border-color: var(--color-text-200);
    width: 200px;
    transition: width 0.6s ease-in-out;
    transition-property: all;

    @media (min-width: 768px) {
      width: 350px;
    }
  }
  .search-input {
    width: 150px;
    transition: width 0.6s ease-in-out;
    transition-delay: 0.8s;

    @media (min-width: 768px) {
      width: 300px;
    }
  }
  .search-container {
    mask-image: linear-gradient(black 90%, transparent);
  }
</style>
