---
import type { CATEGORIES_MOVIES } from "@/types/apiCategoriesMovies";
import type { Moviesbycategory } from "@/types/apiMovieByCategory";
import { getCategories } from "@/services/getCategories";
import { getMoviesByCategory } from "@/services/getMoviesByCategory";
import CategoriesButtons from "@/components/CategoriesButtons.astro";
import MovieContainer from "@/components/MovieContainer.astro";
import SectionContainer from "@/components/SectionContainer.astro";
import MoviesCard from "@/components/MoviesCard.astro";
import ViewMoreMovies from "@/components/ViewMoreMovies.astro";

const dataMovies = (await getMoviesByCategory()) as Moviesbycategory;
const movies = dataMovies.results;

const dataCategories = (await getCategories()) as CATEGORIES_MOVIES;
const categories = dataCategories.genres;

export const prerender = true;
---

<SectionContainer title="Categories" id="categories">
  <div id="genres-container" class="flex flex-wrap flex-row gap-1 mb-2">
    {
      categories.map((category) => (
        <CategoriesButtons id={`${category.id}`} text={category.name} />
      ))
    }
  </div>
</SectionContainer>
<SectionContainer
  titleId="titleMovie"
  title="Popular Movies"
  id="movies-section"
>
  <MovieContainer>
    {
      movies.map((movie) => (
        <MoviesCard
          id={movie.id}
          title={movie.title}
          image={`https://image.tmdb.org/t/p/w300${movie.poster_path}`}
          average={movie.vote_average}
          releaseDate={movie?.release_date}
        />
      ))
    }
  </MovieContainer>
  <ViewMoreMovies />
</SectionContainer>

<script>
  import type { Moviesbycategory, Result } from "@/types/apiMovieByCategory";
  import { setUpLazyLoad } from "@/services/lazyLoad";
  import { checkLocalStorage } from "@/services/checkLS";
  import notFound from "@/assets/svg/notFound.svg?raw";
  import Star from "@/assets/svg/Star.svg?raw";
  import Heart from "@/assets/svg/Heart.svg?raw";
  import { getLocalStorage } from "@/services/getLocalStorage";
  import { printMoviesFav } from "@/services/printerFavoriteSection";

  const setupGenresContainer = () => {
    const genresContainer = document.getElementById(
      "genres-container"
    ) as HTMLElement;
    const viewMoreMoviesButton = document.getElementById(
      "view-more-movies"
    ) as HTMLElement;
    const viewMoreContainer = document.getElementById(
      "view-more-container"
    ) as HTMLDivElement;

    let currentPage = 1;
    let maxPage = 15;

    viewMoreMoviesButton.addEventListener("click", async () => {
      currentPage++;
      const hash = window.location.hash;

      if (hash.startsWith("#category") && currentPage <= maxPage) {
        const [hashCategory, hashId] = hash.split("=");
        const [categoryID, categoryName] = hashId.split("-");
        (async () => {
          const response = await fetch(
            `/api/pageId/${categoryID}/${currentPage}.json`
          );

          if (!response.ok) {
            throw new Error(`Error fetching data: ${response.statusText}`);
          }
          const movies = await response.json();

          printMovies(movies, "", false);
        })();
      } else if (currentPage <= maxPage) {
        try {
          const response = await fetch(`/api/page/${currentPage}.json`);
          if (!response.ok) {
            throw new Error(`Error fetching data: ${response.statusText}`);
          }
          const data = await response.json();

          printMovies(data, "", false);
        } catch (error) {
          console.error(error);
        }
      }

      if (currentPage === maxPage) {
        viewMoreContainer?.classList.add("hidden");
      }
    }); //Ajustar

    genresContainer.addEventListener("click", async (event) => {
      const target = event.target as HTMLElement;
      currentPage = 1;

      if (target.tagName === "BUTTON") {
        const categoryID = target.id;
        const categoryName = target.textContent?.trim();

        try {
          const movies = await getMoviesByCategory(`${categoryID}`);
          printMovies(movies, `${categoryName}`, true);
          history.pushState({}, "", `#category=${categoryID}-${categoryName}`);
        } catch (error) {
          console.error(error);
        }
      }

      if (currentPage === maxPage) {
        viewMoreContainer?.classList.add("hidden");
      } else {
        viewMoreContainer?.classList.remove("hidden");
      }
    }); //Ajustar

    // Ajustar
    window.addEventListener("popstate", async () => {
      const hash = window.location.hash;

      if (!hash) {
        window.location.reload();
      } else if (hash.startsWith("#category")) {
        const [hashCategory, hashId] = hash.split("=");
        const [categoryID, categoryName] = hashId.split("-");
        try {
          const movies = await getMoviesByCategory(`${categoryID}`);
          printMovies(movies, `${categoryName}`);
        } catch (error) {
          console.error(error);
        }
      }
    });

    // Ajustar
    window.addEventListener("hashchange", () => {
      const hash = window.location.hash;
      if (hash && hash.startsWith("#category")) {
        const [hashCategory, hashId] = hash.split("=");
        const [categoryID, categoryName] = hashId.split("-");
        (async () => {
          const movies = await getMoviesByCategory(`${categoryID}`);
          printMovies(movies, `${categoryName}`, true);
        })();
      }
    });

    async function getMoviesByCategory(categoryID: string) {
      try {
        const response = await fetch(`/api/${categoryID}.json`);
        if (!response.ok) {
          throw new Error(`Error fetching data: ${response.statusText}`);
        }
        const data = await response.json();

        return data;
      } catch (error) {
        console.error(error);
      }
    } // Ajustar: Cambiar por callToApi

    function getYear(releaseDate: Date) {
      if (releaseDate) {
        let date = new Date(releaseDate);
        let year = date.getUTCFullYear();

        return year;
      }
    }

    function printMovies(
      movies: Moviesbycategory,
      CategoriName: string,
      clean = false
    ) {
      const title = document.getElementById("titleMovie") as HTMLElement;
      const moviesContainer = document.getElementById(
        "movies-container"
      ) as HTMLElement;

      if (clean) {
        moviesContainer.innerHTML = "";
        CategoriName.includes("Movie")
          ? (title.innerHTML = `${CategoriName}`)
          : (title.innerHTML = `${CategoriName} Movies`);
      }

      movies.results.map((movie) => {
        const article = document.createElement("article");
        article.className = "space-y-2";

        const link = document.createElement("a");
        link.href = `/movie/${movie.id}`;
        link.className =
          "embla__slide rounded-2xl hover:shadow-2xl hover:scale-105 transition-all";

        const picture = document.createElement("picture");
        picture.className = "h-full w-full";

        if (movie.poster_path === null) {
          const noImage = document.createElement("div");
          noImage.setAttribute("aria-label", "Image no found");
          noImage.setAttribute("role", "img");
          noImage.className =
            "w-full h-full rounded-2xl poster-img flex flex-col items-center justify-center gap-4";

          const span = document.createElement("span");
          span.className = "text-lg md:text-xl xl:text-2xl font-extrabold";
          span.innerText = "Image no found";

          const svgContainer = document.createElement("div");
          svgContainer.innerHTML = notFound.toString();

          noImage.append(span, svgContainer);
          picture.appendChild(noImage);
        } else {
          const img = document.createElement("img");
          img.setAttribute(
            "data-src",
            `https://image.tmdb.org/t/p/w500${movie.poster_path}`
          );
          img.setAttribute("alt", `${movie.title}`);
          img.className = "lazy poster-img embla__slide__img";

          picture.appendChild(img);
        }

        const likeButton = document.createElement("button");
        likeButton.className =
          "absolute top-2 right-2 flex justify-center items-center size-8 rounded-full transition-colors bg-black/30 text-white hover:bg-black/50";
        likeButton.setAttribute("data-id", String(movie.id)); // Corrige a string

        getLocalStorage()[`${movie.id}`]
          ? likeButton.classList.add("liked")
          : likeButton.classList.remove("liked");

        likeButton.addEventListener("click", async (e) => {
          e.preventDefault();
          e.stopPropagation();
          await checkLocalStorage(`${movie.id}`);
          updateLikeButtons(`${movie.id}`); // Sincroniza todos los botones con ese id
          printMoviesFav(getLocalStorage(), true);
        });

        const svgHeart = document.createElement("div");
        svgHeart.innerHTML = Heart.toString();

        const header = document.createElement("header");
        header.className =
          "absolute bottom-0 bg-black/70 p-2 text-white md:pl-4 w-full rounded-b-2xl mask-top";

        const div = document.createElement("div");
        div.className = "w-auto flex flex-row gap-2 items-center";

        const average = document.createElement("p");
        average.className = "embla__slide__average";
        average.innerText = `${(movie.vote_average ?? 0).toFixed(1)}`;

        const svgContainer = document.createElement("div");
        svgContainer.innerHTML = Star.toString();

        const headerTitle = document.createElement("header");
        headerTitle.className = "flex flex-col";

        const h3 = document.createElement("h3");
        h3.className = "embla__slide__title";
        h3.innerText = `${movie.title}`;

        const year = document.createElement("p");
        year.className = "font-semibold text-black/40";
        year.innerText = `${getYear(movie.release_date)}`;

        likeButton.appendChild(svgHeart);
        div.append(svgContainer, average);
        header.append(div);
        link.append(picture, header, likeButton);
        headerTitle.append(h3, year);
        article.append(link, headerTitle);
        moviesContainer.appendChild(article);
      });
      setUpLazyLoad();
    }
  };
  document.addEventListener("astro:page-load", setupGenresContainer);

  // Sincroniza todos los botones like con el mismo data-id
  function updateLikeButtons(movieId: string) {
    const buttons = document.querySelectorAll(`button[data-id='${movieId}']`);
    const isLiked = getLocalStorage()[`${movieId}`];
    buttons.forEach((btn) => {
      btn.classList.toggle("liked", isLiked);
    });
  }
</script>
