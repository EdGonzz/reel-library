---
import { type CATEGORIES_MOVIES } from "@/types/apiCategoriesMovies";
import { getCategories } from "@/services/getCategories";
import CategoriesButtons from "@/components/CategoriesButtons.astro";
import MovieContainer from "@/components/MovieContainer.astro";
import SectionContainer from "@/components/SectionContainer.astro";
import type { Moviesbycategory } from "@/types/apiMovieByCategory";
import { getMoviesByCategory } from "@/services/getMoviesByCategory";
import MoviesCard from "@/components/MoviesCard.astro";

const dataMovies = (await getMoviesByCategory()) as Moviesbycategory;
const movies = dataMovies.results;

const dataCategories = (await getCategories()) as CATEGORIES_MOVIES;
const categories = dataCategories.genres;

export const prerender = true;
---

<SectionContainer title="Categories" id="categories">
  <div id="genres-container" class="flex flex-wrap flex-row gap-1 mb-2">
    {
      categories.map((category) => (
        <CategoriesButtons id={`${category.id}`} text={category.name} />
      ))
    }
  </div>
</SectionContainer>
<SectionContainer
  titleId="titleMovie"
  title="Popular Movies"
  id="movies-section"
>
  <MovieContainer>
    {
      movies.map((movie) => (
        <MoviesCard
          id={movie.id}
          title={movie.title}
          image={`https://image.tmdb.org/t/p/w300${movie.poster_path}`}
          average={movie.vote_average}
        />
      ))
    }
  </MovieContainer>
</SectionContainer>

<script>
  import type { Moviesbycategory } from "@/types/apiMovieByCategory";
  import { setUpLazyLoad } from "@/services/lazyLoad";

  const setupGenresContainer = () => {
    const genresContainer = document.getElementById(
      "genres-container"
    ) as HTMLElement;

    genresContainer.addEventListener("click", async (event) => {
      const target = event.target as HTMLElement;

      if (target.tagName === "BUTTON") {
        const categoryID = target.id;
        const categoryName = target.textContent?.trim();

        try {
          const movies = await getMoviesByCategory(`${categoryID}`);
          printMovies(movies, `${categoryName}`);
          history.pushState({}, "", `#category=${categoryID}-${categoryName}`);
        } catch (error) {
          console.error(error);
        }
      }
    });

    window.addEventListener("popstate", async () => {
      const hash = window.location.hash;

      if (!hash) {
        window.location.reload();
      } else if (hash.startsWith("#category")) {
        const [hashCategory, hashId] = hash.split("=");
        const [categoryID, categoryName] = hashId.split("-");
        try {
          const movies = await getMoviesByCategory(`${categoryID}`);
          printMovies(movies, `${categoryName}`);
        } catch (error) {
          console.error(error);
        }
      }
    });

    window.addEventListener("hashchange", () => {
      const hash = window.location.hash;
      if (hash && hash.startsWith("#category")) {
        const [hashCategory, hashId] = hash.split("=");
        const [categoryID, categoryName] = hashId.split("-");
        (async () => {
          const movies = await getMoviesByCategory(`${categoryID}`);
          printMovies(movies, `${categoryName}`);
        })();
      }
    });

    async function getMoviesByCategory(categoryID: string) {
      try {
        const response = await fetch(`/api/${categoryID}.json`);
        if (!response.ok) {
          throw new Error(`Error fetching data: ${response.statusText}`);
        }
        const data = await response.json();

        return data;
      } catch (error) {
        console.error(error);
      }
    }

    function printMovies(movies: Moviesbycategory, CategoriName: string) {
      const title = document.getElementById("titleMovie") as HTMLElement;

      if (CategoriName.includes("Movie")) {
        title.innerHTML = `${CategoriName}`;
      } else {
        title.innerHTML = `${CategoriName} Movies`;
      }

      const moviesContainer = document.getElementById(
        "movies-container"
      ) as HTMLElement;

      moviesContainer.innerHTML = `
              ${movies.results
                .map(
                  (movie) => `
                <a href="/movie/${movie.id}" class="hover:scale-105 transition-transform" data-astro-reload>
                  <article class="relative">
                    <picture class="relative md:h-full md:w-full">
                      <img 
                        data-src="https://image.tmdb.org/t/p/w500${movie.poster_path}"
                        alt="${movie.title}"
                        class="lazy poster-img embla__slide__img mask-bottom"
                      />
                    </picture>
                    <div class="absolute bottom-0 text-start mt-0 p-2 bg-black/50 backdrop-saturate-150 text-white md:pl-4 rounded-b-2xl w-full">
                      <h3 class="text-xl">${movie.title}</h3>
                      <div class="w-auto flex flex-row gap-2 items-center">
                        <svg class="w-4 h-4 text-yellow-400 md:w-5 md:h-5" viewBox="0 0 24 24" fill="currentColor">
                          <path d="M12 17.27L18.18 21l-1.64-7.03L22 9.24l-7.19-.61L12 2 9.19 8.63 2 9.24l5.46 4.73L5.82 21z"/>
                        </svg>
                        <p>${(movie.vote_average ?? 0).toFixed(1)}</p>
                      </div>
                    </div>
                  </article>
                </a>
              `
                )
                .join("")}
            `;
      setUpLazyLoad();
    }
  };
  document.addEventListener("astro:page-load", setupGenresContainer);
</script>
