---
import { type APITMDB } from "@/types/apiTrendingMovies";
import { getMovies } from "@/services/getMovies";
import MoviesArticle from "@/components/MoviesArticle.astro";

const data = (await getMovies("week")) as APITMDB;
const movies = data.results;
---

<div class="embla">
  <div class="embla__viewport">
    <div class="embla__container">
      {
        movies.map((movie) => (
          <MoviesArticle
            id={movie.id}
            mobileImage={`https://image.tmdb.org/t/p/w200${movie.poster_path}`}
            desktopImage={`https://image.tmdb.org/t/p/w500${movie.backdrop_path}`}
            title={movie.title}
            average={movie.vote_average}
            alt={movie.title}
          />
        ))
      }
    </div>
  </div>
  <div class="embla__controls">
    <div class="embla__buttons">
      <button
        class="embla__button embla__button--prev"
        type="button"
        disabled=""
      >
        <svg class="embla__button__svg" viewBox="0 0 532 532">
          <path
            fill="currentColor"
            d="M355.66 11.354c13.793-13.805 36.208-13.805 50.001 0 13.785 13.804 13.785 36.238 0 50.034L201.22 266l204.442 204.61c13.785 13.805 13.785 36.239 0 50.044-13.793 13.796-36.208 13.796-50.002 0a5994246.277 5994246.277 0 0 0-229.332-229.454 35.065 35.065 0 0 1-10.326-25.126c0-9.2 3.393-18.26 10.326-25.2C172.192 194.973 332.731 34.31 355.66 11.354Z"
          ></path>
        </svg></button
      ><button
        class="embla__button embla__button--next"
        type="button"
        disabled=""
      >
        <svg class="embla__button__svg" viewBox="0 0 532 532">
          <path
            fill="currentColor"
            d="M176.34 520.646c-13.793 13.805-36.208 13.805-50.001 0-13.785-13.804-13.785-36.238 0-50.034L330.78 266 126.34 61.391c-13.785-13.805-13.785-36.239 0-50.044 13.793-13.796 36.208-13.796 50.002 0 22.928 22.947 206.395 206.507 229.332 229.454a35.065 35.065 0 0 1 10.326 25.126c0 9.2-3.393 18.26-10.326 25.2-45.865 45.901-206.404 206.564-229.332 229.52Z"
          ></path>
        </svg>
      </button>
    </div>
    <div class="embla__dots"></div>
  </div>
</div>

<style is:inline>
  .embla {
    padding-top: 20px;
    padding-bottom: 20px;
    width: 100%;
    --slide-spacing: 0.9rem;
    --slide-size: 60%;

    @media (min-width: 768px) {
      --slide-size: 450px;
      --slide-spacing: 2rem;
    }
  }
  .embla__viewport {
    overflow: hidden;
  }
  .embla__container {
    display: flex;
    align-items: center;
    touch-action: pan-y pinch-zoom;
    margin-left: calc(var(--slide-spacing) * -1);

    @media (min-width: 768px) {
      display: flex;
      flex-direction: row;
      margin-left: 0;
      width: 100%;
    }
  }
  .embla__slide {
    transform: translate3d(0, 0, 0);
    flex: 0 0 var(--slide-size);
    display: flex;
    flex-direction: column;
    align-items: center;
    min-width: 0;
    padding-left: var(--slide-spacing);

    @media (min-width: 768px) {
      padding-left: 0;
      align-items: start;
      margin-left: var(--slide-spacing);
    }
  }
  .embla__slide__img {
    border-radius: 1.6rem;
    display: block;
    object-fit: contain;

    @media (min-width: 768px) {
      width: 100%;
      height: 100%;
      mask-image: linear-gradient(black 75%, transparent);
    }
  }
  .embla__slide__info {
    margin-top: 0.5rem;
    text-align: center;

    @media (min-width: 768px) {
      position: absolute;
      bottom: 0;
      text-align: start;
      margin-top: 0;
      padding: 0.5rem;
    }
  }
  .embla__slide__title {
    font-size: 1.5rem;
    font-weight: bold;
    margin-bottom: 0.5rem;

    @media (min-width: 768px) {
      font-size: 1.875rem;
      margin-bottom: 0;
    }
  }
  .embla__slide__average {
    font-size: 1rem;
    line-height: 1.5;
    font-weight: 600;

    @media (min-width: 768px) {
      font-size: 1.25rem;
    }
  }
  .embla__controls {
    margin-top: 1rem;
    display: grid;
    grid-template-columns: auto 1fr;
    justify-items: center;

    @media (min-width: 768px) {
      width: 100%;
      justify-content: space-evenly;
      padding-inline: 1rem;
    }

    @media (min-width: 1024px) {
      padding-inline: 1.5rem;
    }
  }
  .embla__buttons {
    display: none;
    @media (min-width: 768px) {
      display: grid;
      grid-template-columns: repeat(2, 1fr);
      gap: 0.6rem;
      align-items: center;
    }
  }
  .embla__button {
    touch-action: manipulation;
    text-decoration: none;
    cursor: pointer;
    width: 3.6rem;
    height: 3.6rem;
    z-index: 1;
    display: flex;
    align-items: center;
  }
  .embla__button__svg {
    width: 35%;
    height: 35%;
  }
  .embla__dots {
    width: 80%;
    display: flex;
    flex-wrap: wrap;
    justify-content: center;
    gap: 0.2rem;
    align-items: center;

    @media (min-width: 768px) {
      justify-self: flex-end;
      width: 50%;
      justify-content: end;
    }

    @media (min-width: 1024px) {
      width: 30%;
    }
  }
  .embla__dot {
    appearance: none;
    background-color: transparent;
    touch-action: manipulation;
    text-decoration: none;
    cursor: pointer;
    width: 1.4rem;
    height: 1.4rem;
    display: flex;
    align-items: center;
    justify-content: center;
    border-radius: 50%;
  }
  .embla__dot:after {
    box-shadow: inset 0 0 0 0.15rem var(--color-bg-300);
    width: 0.8rem;
    height: 0.8rem;
    border-radius: 50%;
    display: flex;
    align-items: center;
    content: "";
  }
  .embla__dot--selected:after {
    box-shadow: inset 0 0 0 0.15rem var(--color-primary-100);
  }
</style>

<script>
  import EmblaCarousel, {
    type EmblaCarouselType,
    type EmblaOptionsType,
  } from "embla-carousel";
  import { setupTweenOpacity } from "@/services/EmblaCarouselTweenOpacity";
  import { addDotBtnsAndClickHandlers } from "@/services/EmblaCarouselDotButton";
  import { addPrevNextBtnsClickHandlers } from "@/services/EmblaCarouselArrowButtons";
  import Autoplay from "embla-carousel-autoplay";

  const OPTIONS: EmblaOptionsType = { loop: true };

  const emblaNode = document.querySelector(".embla") as HTMLElement;
  const viewportNode = emblaNode.querySelector(
    ".embla__viewport"
  ) as HTMLElement;
  const prevBtn = emblaNode.querySelector(
    ".embla__button--prev"
  ) as HTMLElement;
  const nextBtn = emblaNode.querySelector(
    ".embla__button--next"
  ) as HTMLElement;
  const dotsNode = document.querySelector(".embla__dots") as HTMLElement;

  const mediaQuery = window.matchMedia("(min-width: 768px)");
  const createAutoPlayPlugin = () =>
    mediaQuery.matches
      ? [
          Autoplay({
            delay: 5000,
            stopOnMouseEnter: true,
            stopOnInteraction: false,
          }),
        ]
      : [];

  const emblaApi = EmblaCarousel(viewportNode, OPTIONS, createAutoPlayPlugin());

  const onNavButtonClick = (emblaApi: EmblaCarouselType): void => {
    const autoplay = emblaApi?.plugins()?.autoplay;
    if (!autoplay) return;

    const resetOrStop =
      autoplay.options.stopOnInteraction === false
        ? autoplay.reset
        : autoplay.stop;

    resetOrStop();
  };

  const removeTweenOpacity = setupTweenOpacity(emblaApi);

  const removePrevNextBtnsClickHandlers = addPrevNextBtnsClickHandlers(
    emblaApi,
    prevBtn,
    nextBtn,
    onNavButtonClick
  );
  const removeDotBtnsAndClickHandlers = addDotBtnsAndClickHandlers(
    emblaApi,
    dotsNode,
    onNavButtonClick
  );

  emblaApi
    .on("destroy", removeTweenOpacity)
    .on("destroy", removePrevNextBtnsClickHandlers)
    .on("destroy", removeDotBtnsAndClickHandlers);
</script>
