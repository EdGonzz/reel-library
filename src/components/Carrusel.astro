---
import { type APITMDB } from "@/types/apiTrendingMovies";
import { getMovies } from "@/services/getMovies";
import MoviesArticle from "@/components/MoviesArticle.astro";

const data = (await getMovies("week")) as APITMDB;
const movies = data.results;
---

<div class="embla">
  <div class="embla__viewport">
    <div class="embla__container">
      {
        movies.map((movie) => (
          <MoviesArticle
            id={movie.id}
            mobileImage={`https://image.tmdb.org/t/p/w200${movie.poster_path}`}
            desktopImage={`https://image.tmdb.org/t/p/w500${movie.backdrop_path}`}
            title={movie.title}
            average={movie.vote_average}
            alt={movie.title}
          />
        ))
      }
    </div>
  </div>
  <div class="embla__controls">
    <div class="embla__buttons">
      <button
        class="embla__button embla__button--prev"
        type="button"
        disabled=""
      >
        <svg class="embla__button__svg" viewBox="0 0 532 532">
          <path
            fill="currentColor"
            d="M355.66 11.354c13.793-13.805 36.208-13.805 50.001 0 13.785 13.804 13.785 36.238 0 50.034L201.22 266l204.442 204.61c13.785 13.805 13.785 36.239 0 50.044-13.793 13.796-36.208 13.796-50.002 0a5994246.277 5994246.277 0 0 0-229.332-229.454 35.065 35.065 0 0 1-10.326-25.126c0-9.2 3.393-18.26 10.326-25.2C172.192 194.973 332.731 34.31 355.66 11.354Z"
          ></path>
        </svg></button
      ><button
        class="embla__button embla__button--next"
        type="button"
        disabled=""
      >
        <svg class="embla__button__svg" viewBox="0 0 532 532">
          <path
            fill="currentColor"
            d="M176.34 520.646c-13.793 13.805-36.208 13.805-50.001 0-13.785-13.804-13.785-36.238 0-50.034L330.78 266 126.34 61.391c-13.785-13.805-13.785-36.239 0-50.044 13.793-13.796 36.208-13.796 50.002 0 22.928 22.947 206.395 206.507 229.332 229.454a35.065 35.065 0 0 1 10.326 25.126c0 9.2-3.393 18.26-10.326 25.2-45.865 45.901-206.404 206.564-229.332 229.52Z"
          ></path>
        </svg>
      </button>
    </div>
    <div class="embla__dots"></div>
  </div>
</div>

<script>
  import EmblaCarousel, {
    type EmblaCarouselType,
    type EmblaOptionsType,
  } from "embla-carousel";
  import { setupTweenOpacity } from "@/services/EmblaCarouselTweenOpacity";
  import { addDotBtnsAndClickHandlers } from "@/services/EmblaCarouselDotButton";
  import { addPrevNextBtnsClickHandlers } from "@/services/EmblaCarouselArrowButtons";
  import Autoplay from "embla-carousel-autoplay";

  const OPTIONS: EmblaOptionsType = { loop: true };

  const setupCarousel = () => {
    const emblaNode = document.querySelector(".embla") as HTMLElement;
    const viewportNode = emblaNode.querySelector(
      ".embla__viewport"
    ) as HTMLElement;
    const prevBtn = emblaNode.querySelector(
      ".embla__button--prev"
    ) as HTMLElement;
    const nextBtn = emblaNode.querySelector(
      ".embla__button--next"
    ) as HTMLElement;
    const dotsNode = document.querySelector(".embla__dots") as HTMLElement;

    const mediaQuery = window.matchMedia("(min-width: 768px)");
    const createAutoPlayPlugin = () =>
      mediaQuery.matches
        ? [
            Autoplay({
              delay: 5000,
              stopOnMouseEnter: true,
              stopOnInteraction: false,
            }),
          ]
        : [];

    const emblaApi = EmblaCarousel(
      viewportNode,
      OPTIONS,
      createAutoPlayPlugin()
    );

    const onNavButtonClick = (emblaApi: EmblaCarouselType): void => {
      const autoplay = emblaApi?.plugins()?.autoplay;
      if (!autoplay) return;

      const resetOrStop =
        autoplay.options.stopOnInteraction === false
          ? autoplay.reset
          : autoplay.stop;

      resetOrStop();
    };

    const removeTweenOpacity = setupTweenOpacity(emblaApi);

    const removePrevNextBtnsClickHandlers = addPrevNextBtnsClickHandlers(
      emblaApi,
      prevBtn,
      nextBtn,
      onNavButtonClick
    );
    const removeDotBtnsAndClickHandlers = addDotBtnsAndClickHandlers(
      emblaApi,
      dotsNode,
      onNavButtonClick
    );

    emblaApi
      .on("destroy", removeTweenOpacity)
      .on("destroy", removePrevNextBtnsClickHandlers)
      .on("destroy", removeDotBtnsAndClickHandlers);

    return () => {
      emblaApi.destroy();
    };
  };

  // Ejecutar en la carga inicial y después de cada navegación
  document.addEventListener("astro:page-load", setupCarousel);
</script>
