---
import { type SimilarMovies, type Result } from "@/types/apiSimilarMovies";
import MoviesCard from "@/components/MoviesCard.astro";
import MovieContainer from "./MovieContainer.astro";
import SectionContainer from "./SectionContainer.astro";
import { getDetailsMovie } from "@/services/getDetailsMovie";

interface Props {
  movieId: string;
}

const { movieId } = Astro.props;

const similarMovies = await getDetailsMovie(movieId, "/similar");

function getSimilarMovies(similarMovies: SimilarMovies) {
  let movies = similarMovies.results;

  if (movies.length > 0) {
    return movies.sort((a, b) => b.popularity - a.popularity);
  } else {
    return [];
  }
}

const similarMoviesFiltered = getSimilarMovies(similarMovies);
---

<SectionContainer title="Similar Movies" id="similar-movies">
  <MovieContainer>
    {
      similarMoviesFiltered.map((movie: Object) => (
        <MoviesCard
          id={(movie as Result).id}
          title={(movie as Result).title}
          image={`https://image.tmdb.org/t/p/w500${(movie as Result).poster_path}`}
          average={(movie as Result).vote_average}
          releaseDate={(movie as Result).release_date}
        />
      ))
    }
  </MovieContainer>
</SectionContainer>
